public void alert(){
AlertDialog.Builder alertDialog = new AlertDialog.Builder(PDFDisplayActivity.this);
  alertDialog.setTitle(" Auto Logout");
alertDialog.setMessage("You will be logged out automatically after 1 minute.");

alertDialog.setPositiveButton("YES", new DialogInterface.OnClickListener() {
    public void onClick(DialogInterface dialog, int which) {

     waitTimer = new CountDownTimer(60000, 1000) {

            public void onTick(long millisUntilFinished) {
                //Toast.makeText(getApplicationContext(), "seconds remaining: " + millisUntilFinished / 1000, Toast.LENGTH_SHORT).show();
            }
            public void onFinish() {
                Intent logout = new Intent(getApplicationContext(), LoginActivity.class);
                logout.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                startActivity(logout);
                finish();
            }
         }.start();
    }
});

alertDialog.setNegativeButton("NO", new DialogInterface.OnClickListener() {
    public void onClick(DialogInterface dialog, int which) {
      Toast.makeText(getApplicationContext(), "Please logout when you are done reading the agreement.", Toast.LENGTH_SHORT).show();
     waitTimer = new CountDownTimer(30000, 1000) {

            public void onTick(long millisUntilFinished) {
                //Toast.makeText(getApplicationContext(), "seconds remaining: " + millisUntilFinished / 1000, Toast.LENGTH_SHORT).show();
            }
            public void onFinish() {
                alert();
            }
         }.start();

    }
});
alertDialog.show();



  WebView mWebView=new WebView(this);
                mWebView.getSettings().setJavaScriptEnabled(true);
                mWebView.loadUrl("https://docs.google.com/gview?embedded=true&url=");
                setContentView(mWebView);


                /**
                 MapButton.setOnTouchListener(new View.OnTouchListener() {

                @Override public boolean onTouch(View view, MotionEvent event) {
                if (event.getAction() == MotionEvent.ACTION_UP) {
                MapButton.setBackgroundResource(R.drawable.map_onpress);
                changeScreen(PaceMaps.class);

                Log.d("on touch", "darken");
                } else if (event.getAction() == MotionEvent.ACTION_DOWN) {
                MapButton.setBackgroundResource(R.drawable.map_onpress);
                }
                return false;
                }

                });
                        **/


                        /**
                                if (file.exists()) {
                                    Uri path = Uri.fromFile(file);
                                    Intent intent = new Intent(Intent.ACTION_VIEW);
                                    intent.setDataAndType(path, "application/pdf");
                                    intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);

                                    try {
                                        startActivity(intent);
                                    } catch (ActivityNotFoundException e) {
                                        Toast.makeText(this,
                                                "No Application Available to View PDF",
                                                Toast.LENGTH_SHORT).show();
                                    }
                                    Log.d("Pressed Pdf", "Viewing pdf?");



                                }
                        **/






                      import com.google.gdata.client.spreadsheet.*;
                      import com.google.gdata.data.spreadsheet.*;
                      import com.google.gdata.util.*;

                      import java.io.IOException;
                      import java.net.*;
                      import java.util.*;

                      public class MySpreadsheetIntegration {
                        public static void main(String[] args)
                            throws AuthenticationException, MalformedURLException, IOException, ServiceException {

                          SpreadsheetService service =
                              new SpreadsheetService("MySpreadsheetIntegration-v1");

                          // TODO: Authorize the service object for a specific user (see other sections)

                          // Define the URL to request.  This should never change.
                          URL SPREADSHEET_FEED_URL = new URL(
                              "https://spreadsheets.google.com/feeds/spreadsheets/private/full");

                          // Make a request to the API and get all spreadsheets.
                          SpreadsheetFeed feed = service.getFeed(SPREADSHEET_FEED_URL,
                              SpreadsheetFeed.class);
                          List<SpreadsheetEntry> spreadsheets = feed.getEntries();

                          if (spreadsheets.size() == 0) {
                            // TODO: There were no spreadsheets, act accordingly.
                          }

                          // TODO: Choose a spreadsheet more intelligently based on your
                          // app's needs.
                          SpreadsheetEntry spreadsheet = spreadsheets.get(0);
                          System.out.println(spreadsheet.getTitle().getPlainText());

                          // Get the first worksheet of the first spreadsheet.
                          // TODO: Choose a worksheet more intelligently based on your
                          // app's needs.
                          WorksheetFeed worksheetFeed = service.getFeed(
                              spreadsheet.getWorksheetFeedUrl(), WorksheetFeed.class);
                          List<WorksheetEntry> worksheets = worksheetFeed.getEntries();
                          WorksheetEntry worksheet = worksheets.get(0);

                          // Fetch the list feed of the worksheet.
                          URL listFeedUrl = worksheet.getListFeedUrl();
                          ListFeed listFeed = service.getFeed(listFeedUrl, ListFeed.class);

                          // Iterate through each row, printing its cell values.
                          for (ListEntry row : feed.getEntries()) {
                            // Print the first column's cell value
                            System.out.print(row.getTitle().getPlainText() + "\t");
                            // Iterate over the remaining columns, and print each cell value
                            for (String tag : row.getCustomElements().getTags()) {
                              System.out.print(row.getCustomElements().getValue(tag) + "\t");
                            }
                            System.out.println();
                          }
                        }
                      }


                        package university.pace.mypace2.SSSMentors;

                        /**
                         * Created by Mrgds on 8/19/2016.
                         */
                        import com.google.android.gms.common.ConnectionResult;
                        import com.google.android.gms.common.GoogleApiAvailability;
                        import com.google.api.client.extensions.android.http.AndroidHttp;
                        import com.google.api.client.googleapis.extensions.android.gms.auth.GoogleAccountCredential;
                        import com.google.api.client.googleapis.extensions.android.gms.auth.GooglePlayServicesAvailabilityIOException;
                        import com.google.api.client.googleapis.extensions.android.gms.auth.UserRecoverableAuthIOException;

                        import com.google.api.client.http.HttpTransport;
                        import com.google.api.client.json.JsonFactory;
                        import com.google.api.client.json.jackson2.JacksonFactory;
                        import com.google.api.client.util.ExponentialBackOff;

                        import com.google.api.services.sheets.v4.SheetsScopes;

                        import com.google.api.services.sheets.v4.model.*;

                        import android.Manifest;
                        import android.accounts.AccountManager;
                        import android.app.Activity;
                        import android.app.Dialog;
                        import android.app.ProgressDialog;
                        import android.content.Context;
                        import android.content.Intent;
                        import android.content.SharedPreferences;
                        import android.net.ConnectivityManager;
                        import android.net.NetworkInfo;
                        import android.os.AsyncTask;
                        import android.os.Bundle;
                        import android.support.annotation.NonNull;
                        import android.text.TextUtils;
                        import android.text.method.ScrollingMovementMethod;
                        import android.view.View;
                        import android.view.ViewGroup;
                        import android.widget.Button;
                        import android.widget.LinearLayout;
                        import android.widget.TextView;

                        import java.io.IOException;
                        import java.util.ArrayList;
                        import java.util.Arrays;
                        import java.util.List;

                        import pub.devrel.easypermissions.AfterPermissionGranted;
                        import pub.devrel.easypermissions.EasyPermissions;

                        public class Mentors extends Activity
                                implements EasyPermissions.PermissionCallbacks {
                            GoogleAccountCredential mCredential;
                            private TextView mOutputText;
                            private Button mCallApiButton;
                            ProgressDialog mProgress;

                            static final int REQUEST_ACCOUNT_PICKER = 1000;
                            static final int REQUEST_AUTHORIZATION = 1001;
                            static final int REQUEST_GOOGLE_PLAY_SERVICES = 1002;
                            static final int REQUEST_PERMISSION_GET_ACCOUNTS = 1003;

                            private static final String BUTTON_TEXT = "Call Google Sheets API";
                            private static final String PREF_ACCOUNT_NAME = "accountName";
                            private static final String[] SCOPES = { SheetsScopes.SPREADSHEETS_READONLY };

                            /**
                             * Create the main activity.
                             * @param savedInstanceState previously saved instance data.
                             */
                            @Override
                            protected void onCreate(Bundle savedInstanceState) {
                                super.onCreate(savedInstanceState);
                                LinearLayout activityLayout = new LinearLayout(this);
                                LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(
                                        LinearLayout.LayoutParams.MATCH_PARENT,
                                        LinearLayout.LayoutParams.MATCH_PARENT);
                                activityLayout.setLayoutParams(lp);
                                activityLayout.setOrientation(LinearLayout.VERTICAL);
                                activityLayout.setPadding(16, 16, 16, 16);

                                ViewGroup.LayoutParams tlp = new ViewGroup.LayoutParams(
                                        ViewGroup.LayoutParams.WRAP_CONTENT,
                                        ViewGroup.LayoutParams.WRAP_CONTENT);

                                mCallApiButton = new Button(this);
                                mCallApiButton.setText(BUTTON_TEXT);
                                mCallApiButton.setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        mCallApiButton.setEnabled(false);
                                        mOutputText.setText("");
                                        getResultsFromApi();
                                        mCallApiButton.setEnabled(true);
                                    }
                                });
                                activityLayout.addView(mCallApiButton);

                                mOutputText = new TextView(this);
                                mOutputText.setLayoutParams(tlp);
                                mOutputText.setPadding(16, 16, 16, 16);
                                mOutputText.setVerticalScrollBarEnabled(true);
                                mOutputText.setMovementMethod(new ScrollingMovementMethod());
                                mOutputText.setText(
                                        "Click the \'" + BUTTON_TEXT +"\' button to test the API.");
                                activityLayout.addView(mOutputText);

                                mProgress = new ProgressDialog(this);
                                mProgress.setMessage("Calling Google Sheets API ...");

                                setContentView(activityLayout);

                                // Initialize credentials and service object.
                                mCredential = GoogleAccountCredential.usingOAuth2(
                                        getApplicationContext(), Arrays.asList(SCOPES))
                                        .setBackOff(new ExponentialBackOff());
                            }



                            /**
                             * Attempt to call the API, after verifying that all the preconditions are
                             * satisfied. The preconditions are: Google Play Services installed, an
                             * account was selected and the device currently has online access. If any
                             * of the preconditions are not satisfied, the app will prompt the user as
                             * appropriate.
                             */
                            private void getResultsFromApi() {
                                if (! isGooglePlayServicesAvailable()) {
                                    acquireGooglePlayServices();
                                } else if (mCredential.getSelectedAccountName() == null) {
                                    chooseAccount();
                                } else if (! isDeviceOnline()) {
                                    mOutputText.setText("No network connection available.");
                                } else {
                                    new MakeRequestTask(mCredential).execute();
                                }
                            }

                            /**
                             * Attempts to set the account used with the API credentials. If an account
                             * name was previously saved it will use that one; otherwise an account
                             * picker dialog will be shown to the user. Note that the setting the
                             * account to use with the credentials object requires the app to have the
                             * GET_ACCOUNTS permission, which is requested here if it is not already
                             * present. The AfterPermissionGranted annotation indicates that this
                             * function will be rerun automatically whenever the GET_ACCOUNTS permission
                             * is granted.
                             */
                            @AfterPermissionGranted(REQUEST_PERMISSION_GET_ACCOUNTS)
                            private void chooseAccount() {
                                if (EasyPermissions.hasPermissions(
                                        this, Manifest.permission.GET_ACCOUNTS)) {
                                    String accountName = getPreferences(Context.MODE_PRIVATE)
                                            .getString(PREF_ACCOUNT_NAME, null);
                                    if (accountName != null) {
                                        mCredential.setSelectedAccountName(accountName);
                                        getResultsFromApi();
                                    } else {
                                        // Start a dialog from which the user can choose an account
                                        startActivityForResult(
                                                mCredential.newChooseAccountIntent(),
                                                REQUEST_ACCOUNT_PICKER);
                                    }
                                } else {
                                    // Request the GET_ACCOUNTS permission via a user dialog
                                    EasyPermissions.requestPermissions(
                                            this,
                                            "This app needs to access your Google account (via Contacts).",
                                            REQUEST_PERMISSION_GET_ACCOUNTS,
                                            Manifest.permission.GET_ACCOUNTS);
                                }
                            }

                            /**
                             * Called when an activity launched here (specifically, AccountPicker
                             * and authorization) exits, giving you the requestCode you started it with,
                             * the resultCode it returned, and any additional data from it.
                             * @param requestCode code indicating which activity result is incoming.
                             * @param resultCode code indicating the result of the incoming
                             *     activity result.
                             * @param data Intent (containing result data) returned by incoming
                             *     activity result.
                             */
                            @Override
                            protected void onActivityResult(
                                    int requestCode, int resultCode, Intent data) {
                                super.onActivityResult(requestCode, resultCode, data);
                                switch(requestCode) {
                                    case REQUEST_GOOGLE_PLAY_SERVICES:
                                        if (resultCode != RESULT_OK) {
                                            mOutputText.setText(
                                                    "This app requires Google Play Services. Please install " +
                                                            "Google Play Services on your device and relaunch this app.");
                                        } else {
                                            getResultsFromApi();
                                        }
                                        break;
                                    case REQUEST_ACCOUNT_PICKER:
                                        if (resultCode == RESULT_OK && data != null &&
                                                data.getExtras() != null) {
                                            String accountName =
                                                    data.getStringExtra(AccountManager.KEY_ACCOUNT_NAME);
                                            if (accountName != null) {
                                                SharedPreferences settings =
                                                        getPreferences(Context.MODE_PRIVATE);
                                                SharedPreferences.Editor editor = settings.edit();
                                                editor.putString(PREF_ACCOUNT_NAME, accountName);
                                                editor.apply();
                                                mCredential.setSelectedAccountName(accountName);
                                                getResultsFromApi();
                                            }
                                        }
                                        break;
                                    case REQUEST_AUTHORIZATION:
                                        if (resultCode == RESULT_OK) {
                                            getResultsFromApi();
                                        }
                                        break;
                                }
                            }

                            /**
                             * Respond to requests for permissions at runtime for API 23 and above.
                             * @param requestCode The request code passed in
                             *     requestPermissions(android.app.Activity, String, int, String[])
                             * @param permissions The requested permissions. Never null.
                             * @param grantResults The grant results for the corresponding permissions
                             *     which is either PERMISSION_GRANTED or PERMISSION_DENIED. Never null.
                             */
                            @Override
                            public void onRequestPermissionsResult(int requestCode,
                                                                   @NonNull String[] permissions,
                                                                   @NonNull int[] grantResults) {
                                super.onRequestPermissionsResult(requestCode, permissions, grantResults);
                                EasyPermissions.onRequestPermissionsResult(
                                        requestCode, permissions, grantResults, this);
                            }

                            /**
                             * Callback for when a permission is granted using the EasyPermissions
                             * library.
                             * @param requestCode The request code associated with the requested
                             *         permission
                             * @param list The requested permission list. Never null.
                             */
                            @Override
                            public void onPermissionsGranted(int requestCode, List<String> list) {
                                // Do nothing.
                            }

                            /**
                             * Callback for when a permission is denied using the EasyPermissions
                             * library.
                             * @param requestCode The request code associated with the requested
                             *         permission
                             * @param list The requested permission list. Never null.
                             */
                            @Override
                            public void onPermissionsDenied(int requestCode, List<String> list) {
                                // Do nothing.
                            }

                            /**
                             * Checks whether the device currently has a network connection.
                             * @return true if the device has a network connection, false otherwise.
                             */
                            private boolean isDeviceOnline() {
                                ConnectivityManager connMgr =
                                        (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
                                NetworkInfo networkInfo = connMgr.getActiveNetworkInfo();
                                return (networkInfo != null && networkInfo.isConnected());
                            }

                            /**
                             * Check that Google Play services APK is installed and up to date.
                             * @return true if Google Play Services is available and up to
                             *     date on this device; false otherwise.
                             */
                            private boolean isGooglePlayServicesAvailable() {
                                GoogleApiAvailability apiAvailability =
                                        GoogleApiAvailability.getInstance();
                                final int connectionStatusCode =
                                        apiAvailability.isGooglePlayServicesAvailable(this);
                                return connectionStatusCode == ConnectionResult.SUCCESS;
                            }

                            /**
                             * Attempt to resolve a missing, out-of-date, invalid or disabled Google
                             * Play Services installation via a user dialog, if possible.
                             */
                            private void acquireGooglePlayServices() {
                                GoogleApiAvailability apiAvailability =
                                        GoogleApiAvailability.getInstance();
                                final int connectionStatusCode =
                                        apiAvailability.isGooglePlayServicesAvailable(this);
                                if (apiAvailability.isUserResolvableError(connectionStatusCode)) {
                                    showGooglePlayServicesAvailabilityErrorDialog(connectionStatusCode);
                                }
                            }


                            /**
                             * Display an error dialog showing that Google Play Services is missing
                             * or out of date.
                             * @param connectionStatusCode code describing the presence (or lack of)
                             *     Google Play Services on this device.
                             */
                            void showGooglePlayServicesAvailabilityErrorDialog(
                                    final int connectionStatusCode) {
                                GoogleApiAvailability apiAvailability = GoogleApiAvailability.getInstance();
                                Dialog dialog = apiAvailability.getErrorDialog(
                                       this,
                                        connectionStatusCode,
                                        REQUEST_GOOGLE_PLAY_SERVICES);
                                dialog.show();
                            }

                            /**
                             * An asynchronous task that handles the Google Sheets API call.
                             * Placing the API calls in their own task ensures the UI stays responsive.
                             */
                            private class MakeRequestTask extends AsyncTask<Void, Void, List<String>> {
                                private com.google.api.services.sheets.v4.Sheets mService = null;
                                private Exception mLastError = null;

                                public MakeRequestTask(GoogleAccountCredential credential) {
                                    HttpTransport transport = AndroidHttp.newCompatibleTransport();
                                    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();
                                    mService = new com.google.api.services.sheets.v4.Sheets.Builder(
                                            transport, jsonFactory, credential)
                                            .setApplicationName("SSS Freshman App")
                                            .build();
                                }

                                /**
                                 * Background task to call Google Sheets API.
                                 * @param params no parameters needed for this task.
                                 */
                                @Override
                                protected List<String> doInBackground(Void... params) {
                                    try {
                                        return getDataFromApi();
                                    } catch (Exception e) {
                                        mLastError = e;
                                        cancel(true);
                                        return null;
                                    }
                                }

                                /**
                                 * Fetch a list of names and majors of students in a sample spreadsheet:
                                 * https://docs.google.com/spreadsheets/d/1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms/edit
                                 * @return List of names and majors
                                 * @throws IOException
                                 */
                                private List<String> getDataFromApi() throws IOException {
                                    String spreadsheetId = "1njPTxjoLI2c2QpQdBv11Q9YOxTRYZKxs0WEAgwg96PI";
                                    String range = "Class Data!A2:E";
                                    List<String> results = new ArrayList<String>();
                                    ValueRange response = this.mService.spreadsheets().values()
                                            .get(spreadsheetId, range)
                                            .execute();
                                    List<List<Object>> values = response.getValues();
                                    if (values != null) {
                                        results.add("Name, Major");
                                        for (List row : values) {
                                            results.add(row.get(0) + ", " + row.get(4));
                                        }
                                    }
                                    return results;
                                }



                                @Override
                                protected void onPreExecute() {
                                    mOutputText.setText("");
                                    mProgress.show();
                                }

                                @Override
                                protected void onPostExecute(List<String> output) {
                                    mProgress.hide();
                                    if (output == null || output.size() == 0) {
                                        mOutputText.setText("No results returned.");
                                    } else {
                                        output.add(0, "Data retrieved using the Google Sheets API:");
                                        mOutputText.setText(TextUtils.join("\n", output));
                                    }
                                }

                                @Override
                                protected void onCancelled() {
                                    mProgress.hide();
                                    if (mLastError != null) {
                                        if (mLastError instanceof GooglePlayServicesAvailabilityIOException) {
                                            showGooglePlayServicesAvailabilityErrorDialog(
                                                    ((GooglePlayServicesAvailabilityIOException) mLastError)
                                                            .getConnectionStatusCode());
                                        } else if (mLastError instanceof UserRecoverableAuthIOException) {
                                            startActivityForResult(
                                                    ((UserRecoverableAuthIOException) mLastError).getIntent(),
                                                 Mentors.REQUEST_AUTHORIZATION);
                                        } else {
                                            mOutputText.setText("The following error occurred:\n"
                                                    + mLastError.getMessage());
                                        }
                                    } else {
                                        mOutputText.setText("Request cancelled.");
                                    }
                                }
                            }
                        }

package university.pace.mypace2.Courses;

import android.content.res.AssetManager;
import android.content.res.Resources;
import android.os.Bundle;
import android.os.Environment;
import android.os.WorkSource;
import android.support.design.widget.FloatingActionButton;
import android.support.design.widget.Snackbar;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.View;
import android.widget.TextView;
import android.widget.Toast;

import com.google.api.services.calendar.model.Event;
import com.google.common.collect.Table;
import com.viethoa.RecyclerViewFastScroller;
import com.viethoa.models.AlphabetItem;

import org.w3c.dom.Text;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

import jxl.Cell;
import jxl.Sheet;
import jxl.Workbook;
import jxl.read.biff.BiffException;
import university.pace.mypace2.R;

public class Courses extends AppCompatActivity {
    private RecyclerView mRecyclerView;
    private RecyclerView.Adapter mAdapter;
    private RecyclerView.LayoutManager mLayoutManager;
    private RecyclerViewFastScroller fastScroller;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.view_courses);
        // use this setting to improve performance if you know that changes
        // in content do not change the layout size of the RecyclerView

        ArrayList<Course> courselist = new ArrayList<>();


        mRecyclerView = (RecyclerView) findViewById(R.id.recycler_view_course);  // specify an adapter (see also next example)

        // use a linear layout manager
        mLayoutManager = new LinearLayoutManager(this);
        mRecyclerView.setLayoutManager(mLayoutManager);


        fastScroller = (RecyclerViewFastScroller) findViewById(R.id.fast_scroller_courses);
        fastScroller.setRecyclerView(mRecyclerView);


        FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);

        Log.d("reading", "====>");


        File inputWorkbook = new File(Environment.getExternalStorageDirectory()
                + "/Android/data/" + this.getPackageName() + "/ExcelFile/", "courses_fa16.xls");
///storage/emulated/0/Android/data/university.pace.mypace2/ExcelFile/courses_fa16.xls:


            Workbook w;
            try {

                Log.d("workbook exist", "====>");
                w = Workbook.getWorkbook(inputWorkbook);
                // Get the first sheet
                Sheet sheet = w.getSheet(0);
                // Loop over column and lines
                for (int j = 0; j < sheet.getRows(); j++) {
                    Cell cell = sheet.getCell(0, j);

                    for (int i = 0; i < sheet.getColumns(); i++) {
                        Cell cel = sheet.getCell(i, j);
                        //   courselist.add(cel.getContents());

                        Course info = new Course(cell, cel, cell, cel, cell, cel, cell);
                        Log.d("course info=>", info.toString());
                        courselist.add(info);


                    }
                }
                mAdapter = new MyCoursesAdapter(courselist, this);
                mRecyclerView.setAdapter(mAdapter);
                mRecyclerView.setHasFixedSize(true);


                Log.d("courselist", courselist.toString());


            } catch (BiffException e) {
                e.printStackTrace();
                Log.d("Bliff=>", e.toString());

            } catch (Exception e) {
                e.printStackTrace();
                Log.d("Except=>", e.toString());

            }

            ArrayList<AlphabetItem> mAlphabetItems = new ArrayList<>();
            List<String> strAlphabets = new ArrayList<>();
            for (int i = 0; i < courselist.size(); i++) {
                String name = courselist.get(i).subject_code; //.name
                if (name == null || name.trim().isEmpty())
                    continue;

                String word = name.substring(0, 1);
                if (!strAlphabets.contains(word)) {
                    strAlphabets.add(word);
                    mAlphabetItems.add(new AlphabetItem(i, word, false));
                }
            }

            fastScroller.setUpAlphabet(mAlphabetItems);

        /**  else
         {
         courselist.add("File not found..!");
         }
         if(courselist.size()==0){
         courselist.add("Data not found..!");
         }
         **/

        /**  fab.setOnClickListener(new View.OnClickListener() {
        @Override public void onClick(View view) {
        Snackbar.make(view, "Replace with your own action", Snackbar.LENGTH_LONG)
        .setAction("Action", null).show();
        }
        });
         **/

        /**     List<String> courselist = new ArrayList<String>(); //course list

        AssetManager am = getAssets();
        InputStream is = null;

        try {
         is = am.open("C://Users//Mrgds//AndroidStudioProjects//MyPace22//app//src//main//ExcelFile");
        } catch (IOException e1) {
            e1.printStackTrace();
        }

        try {
            Workbook wb = Workbook.getWorkbook(is);
            // Get the first sheet
            // read in rows and colums
            Sheet sheet = wb.getSheet(0);
            int row = sheet.getRows();
            int col = sheet.getColumns();
            // Loop over column and lines
            String data = "";

            for (int i = 0; i < row; i++) {
                for (int c = 0; c < col; col++) {
                    Cell cursor = sheet.getCell(c, i);
                    data = cursor.getContents();

                }
                courselist.add(data);

            }
        } catch (BiffException e) {
            e.printStackTrace();
            Log.d("Error", "Bliff");
        } catch (Exception e) {
            e.printStackTrace();
            Log.d("Error", "While reading" + e);
        }
         **/


    }





    public class Course {
        String campus_description;
        String course_number;
        String course_level;
        String subject_code;
        String subject_description;
        String term_desc;
        String title;

        public Course(Cell campus_description,
                      Cell course_number, Cell course_level, Cell subject_code, Cell subject_description, Cell term_desc,
                      Cell title) {
            this.campus_description = campus_description.toString();
            this.course_number = course_number.toString();
            this.course_level = course_level.toString();
            this.subject_code = subject_code.toString();
            this.subject_description = subject_description.toString();
            this.term_desc = term_desc.toString();
            this.title = title.toString();
        }

        @Override
        public String toString() {
            return campus_description + "\nCourse Number:" + course_number
                    + "\nSubject:" + subject_code + "\nDes:" + subject_description + "\nTerm:" + term_desc + "\nCourse title:" + title;
        }


    }
}
/**
 * public class InfoCompare implements Comparator<Course> {
 * public int compare(Course e1, Course e2) {
 * return e1.subject_code.compareTo(e2.subject_code);
 * }
 * } }
 **/


// adds in Alphabetical scroller


// adds in Alphabetical scroller end





package university.pace.mypace2.Courses;

import android.content.res.AssetManager;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;

import jxl.Cell;
import jxl.Sheet;
import jxl.Workbook;
import jxl.read.biff.BiffException;
import university.pace.mypace2.R;

public class CourseDisplay extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_course_display);

        ArrayList<String> al = new ArrayList<>();

        AssetManager am = getAssets();
        InputStream is = null;
        Log.d("asdf", "adsf");
       /* try {
            is = am.open();
        } catch (IOException e1) {
            e1.printStackTrace();
        }*/

        try {
            Workbook wb = Workbook.getWorkbook(new File(String.valueOf(R.raw.courses_fa16)));
            // Get the first sheet
            // read in rows and columns
            Sheet sheet = wb.getSheet(0);
            int row = sheet.getRows();
            int col = sheet.getColumns();
            // Loop over column and lines
            String data = "";
            /**  goes through the xl sheet*/
            for (int i = 0; i < row; i++) {
                for (int c = 0; c < col; col++) {
                    Cell cursor = sheet.getCell(c, i);
                    data = cursor.getContents();
                }
                al.add(data);

            }
        } catch (BiffException e) {
            e.printStackTrace();
            Log.d("Error", "Bliff");
        } catch (Exception e) {
            e.printStackTrace();
            Log.d("Error", "While reading" + e);
        }


    }
}

   //sets fast scroller to recycler view
        fastScroller.setRecyclerView(recyclerView);
        ArrayList<AlphabetItem>AZ=new ArrayList<>();
        ArrayList<String>strAlphabet=new ArrayList<>();
        for(int i=0; i< List.size();i++)   //looks through google sheets gather data
        {
            String subject=List.get(i).subject_code; //gets subject code -->MAT,ACC,BIO
            if(subject==null ||subject.trim().isEmpty()) //if subject is = to nothing -> insufficient conditions continue
                continue;
        String subjectCode = subject.substring(0,1); //where to start and finish looking through subject codes
            if(!strAlphabet.contains(subjectCode)) {
                strAlphabet.add(subjectCode); //add it if not there
                AZ.add(new AlphabetItem(i,subjectCode,false)); //add item to scroll list
            }



        }
        fastScroller.setUpAlphabet(AZ); //sets up the fast scroller


 private void inflatewebview() {
        SupportFragment frag = new SupportFragment();
        FragmentManager manager = getFragmentManager();
        //swap the fragment
        FragmentTransaction transaction = manager.beginTransaction();

        transaction.add(R.id.supportpace, frag, "Pace SSS WebPage");
        transaction.commit();
        Toast.makeText(this, getResources().getText(R.string.On_More_Academic_Pressed), Toast.LENGTH_SHORT).show();
    }


out.setAnimationListener(new AnimationListener() {

    @Override
    public void onAnimationEnd(Animation animation) {
        mSwitcher.setText("New Text");
        mSwitcher.startAnimation(in);

    }
});
Then, in your onClick() method:

public void onClick(View v) {

    mSwitcher.startAnimation(out);

}

if (cbProhibitEditPW.isChecked()) { // disable editing password
       editTextPassword.setFocusable(false);
       editTextPassword.setFocusableInTouchMode(false); // user touches widget on phone with touch screen
       editTextPassword.setClickable(false); // user navigates with wheel and selects widget
       isProhibitEditPassword= true;
} else { // enable editing of password
       editTextPassword.setFocusable(true);
       editTextPassword.setFocusableInTouchMode(true);
       editTextPassword.setClickable(true);
       isProhibitEditPassword= false;
}


 if (Checkcode(usrcode).contains(eventinfo.eventcode)) {
                        //Code correct
                            Log.d("Code Correct==>",usrcode);
                            Log.d("Match==>",usrcode + eventinfo.eventcode);
                            Toast.makeText(EventChecker.this,"Welcome to Event:" + eventinfo.name,Toast.LENGTH_LONG).show();


                        }
                        else
                        {
                            //incorrect <code>
                            Log.e("No Match==>",usrcode);
                            Toast.makeText(EventChecker.this,"No event code matches " + usrcode,Toast.LENGTH_LONG).show();

                        }